services:
  # Docker conrainer for Node
  node:
    image: node:lts
    container_name: node
    build: 
      dockerfile: Dockerfile
    tty: true
    ports:
      - 3000:3000
    volumes:
      - "/app/node_modules" 
      - ./next-app:/app
    environment:
      WATCHPACK_POLLING: true
    networks: 
      - default
  
  # Docker conrainer for Nginx
  nginx:
    image: nginx:stable
    container_name: nginx
    ports:
      - 80:80
    restart: always
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    networks:
      - default

  # # Docker container for dev database.
  # # 本番では Amazon RDS に置き換わるので使用しない.
  # db:
  #   image: mysql:latest
  #   container_name: mysql
  #   restart: always
  #   ports:
  #     - 3306:3306
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${MYSQL_DATABASE}
  #     MYSQL_USER: ${MYSQL_USER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #     TZ: Asia/Tokyo
  #   volumes:
  #     - ./mysql/conf.d:/etc/mysql/conf.d
  #     - ./mysql/init.d:/docker-entrypoint-initdb.d
  #   networks:
  #     - default

networks:
  default:
    driver: bridge